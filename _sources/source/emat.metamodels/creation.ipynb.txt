{
 "cells": [
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. py:currentmodule:: emat"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Meta-Model Creation"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "MetaModels can be created directly from other core models using the\n",
    ":meth:`create_metamodel_from_design <model.AbstractCoreModel.create_metamodel_from_design>`\n",
    "or :meth:`create_metamodel_from_data <model.AbstractCoreModel.create_metamodel_from_data>`\n",
    "methods of a core model, or by using the :func:`create_metamodel` function, which can\n",
    "create a MetaModel directly from a scope and experimental results, without requiring\n",
    "a core model instance.  Each of these functions returns a :class:`PythonCoreModel` that\n",
    "already wraps the MetaModel in an interface ready for use with other TMIP-EMAT tools,\n",
    "so that in typical cases the user does not need to interact with or know anything\n",
    "about the :class:`MetaModel` class itself, unless they care to dive in to the underlying\n",
    "core or mathematical structures.\n",
    "\n",
    ".. autofunction:: create_metamodel"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To demostrate the creation of a meta-model, we will use the Road Test example model\n",
    "included with TMIP-EMAT.  We will first create and run a design of experiments, to\n",
    "have some experimental data to define the meta-model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import emat.examples\n",
    "scope, db, model = emat.examples.road_test()\n",
    "design = model.design_experiments(design_name='lhs')\n",
    "results = model.run_experiments(design)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can then create a meta-model automatically from these experiments."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mm = model.create_metamodel_from_design('lhs')\n",
    "mm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you are using the default meta-model regressor, as we are doing here, \n",
    "you can directly access a cross-validation method that uses the experimental\n",
    "data to evaluate the quality of the regression model.  The `cross_val_scores`\n",
    "provides a measure of how well the meta-model predicts the experimental \n",
    "outcomes, similar to an $R^2$ measure on a linear regression model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mm.cross_val_scores()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can apply the meta-model directly on a new design of experiments, and \n",
    "use the `contrast_experiments` visualization tool to review how well the\n",
    "meta-model is replicating the underlying model's results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "design2 = mm.design_experiments(design_name='lhs_meta', n_samples=5000)\n",
    "results2 = mm.run_experiments(design2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from emat.analysis import contrast_experiments\n",
    "contrast_experiments(mm.scope, results2, results)"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,py:percent"
  },
  "kernelspec": {
   "display_name": "EMAT-DEV",
   "language": "python",
   "name": "emat-dev"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
